{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "route-module:/home/gabe/github.com/gmencz/puzzles-game/app/root.tsx", "route-module:/home/gabe/github.com/gmencz/puzzles-game/app/routes/index.tsx", "../app/components/jigsaw-puzzle.tsx"],
  "sourcesContent": ["\nimport * as entryServer from \"/home/gabe/github.com/gmencz/puzzles-game/app/entry.server.tsx\";\nimport * as route0 from \"/home/gabe/github.com/gmencz/puzzles-game/app/root.tsx\";\nimport * as route1 from \"/home/gabe/github.com/gmencz/puzzles-game/app/routes/index.tsx\";\nexport { default as assets } from \"./assets.json\";\nexport const entry = { module: entryServer };\nexport const routes = {\n  \"root\": {\n    id: \"root\",\n    parentId: undefined,\n    path: \"\",\n    index: undefined,\n    caseSensitive: undefined,\n    module: route0\n  },\n  \"routes/index\": {\n    id: \"routes/index\",\n    parentId: \"root\",\n    path: undefined,\n    index: true,\n    caseSensitive: undefined,\n    module: route1\n  }\n};", "import * as React from \"react\";\nexport { React };\n", "import { renderToString } from \"react-dom/server\";\nimport { RemixServer } from \"remix\";\nimport type { EntryContext } from \"remix\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders\n  });\n}\n", "import {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useCatch,\n} from \"remix\";\n\nimport styles from \"./tailwind.css\";\n\nexport function links() {\n  return [{ rel: \"stylesheet\", href: styles }];\n}\n\n// https://remix.run/api/conventions#default-export\n// https://remix.run/api/conventions#route-filenames\nexport default function App() {\n  return (\n    <Document>\n      <Outlet />\n    </Document>\n  );\n}\n\n// https://remix.run/docs/en/v1/api/conventions#errorboundary\nexport function ErrorBoundary({ error }: { error: Error }) {\n  console.error(error);\n  return (\n    <Document title=\"Error!\">\n      <div>\n        <h1>There was an error</h1>\n        <p>{error.message}</p>\n        <hr />\n        <p>\n          Hey, developer, you should replace this with what you want your users\n          to see.\n        </p>\n      </div>\n    </Document>\n  );\n}\n\n// https://remix.run/docs/en/v1/api/conventions#catchboundary\nexport function CatchBoundary() {\n  let caught = useCatch();\n\n  let message;\n  switch (caught.status) {\n    case 401:\n      message = (\n        <p>\n          Oops! Looks like you tried to visit a page that you do not have access\n          to.\n        </p>\n      );\n      break;\n    case 404:\n      message = (\n        <p>Oops! Looks like you tried to visit a page that does not exist.</p>\n      );\n      break;\n\n    default:\n      throw new Error(caught.data || caught.statusText);\n  }\n\n  return (\n    <Document title={`${caught.status} ${caught.statusText}`}>\n      <h1>\n        {caught.status}: {caught.statusText}\n      </h1>\n      {message}\n    </Document>\n  );\n}\n\nfunction Document({\n  children,\n  title,\n}: {\n  children: React.ReactNode;\n  title?: string;\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n        {title ? <title>{title}</title> : null}\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n        {process.env.NODE_ENV === \"development\" && <LiveReload />}\n      </body>\n    </html>\n  );\n}\n", "import { JigsawPuzzle } from \"~/components/jigsaw-puzzle\";\n\nexport default function Index() {\n  let imageSrc =\n    \"https://images.ctfassets.net/j95d1p8hsuun/29peK2k7Ic6FsPAVjHWs8W/06d3add40b23b20bbff215f6979267e8/NW_OPENGRAPH_1200x630.jpg\";\n\n  return (\n    <div className=\"h-full relative p-6\">\n      <img className=\"top-0 left-0 w-[600px]\" src={imageSrc} alt=\"New World\" />\n\n      <div className=\"mt-12 relative\">\n        <JigsawPuzzle\n          imageSrc={imageSrc}\n          rows={2}\n          columns={2}\n          onSolved={() => alert(\"Solved!\")}\n        />\n      </div>\n    </div>\n  );\n}\n", "import { useCallback, useEffect, useRef, useState } from \"react\";\nimport clsx from \"clsx\";\n\nlet clamp = (value: number, min: number, max: number) => {\n  if (value < min) {\n    return min;\n  }\n  if (value > max) {\n    return max;\n  }\n  return value;\n};\n\nlet solveTolerancePercentage = 0.028;\n\ntype Tile = {\n  tileOffsetX: number;\n  tileOffsetY: number;\n  tileWidth: number;\n  tileHeight: number;\n  correctPosition: number;\n  currentPosXPerc: number;\n  currentPosYPerc: number;\n  solved: boolean;\n};\n\nexport type JigsawPuzzleProps = {\n  /** Source of the image. Can be any URL or relative path. */\n  imageSrc: string;\n  /** The amount of rows the puzzle will have. Defaults to 3. */\n  rows?: number;\n  /** The amount of columns the puzzle with have. Defaults to 4. */\n  columns?: number;\n  /* Called when the puzzle is solved. Defaults to an empty function. */\n  onSolved?: () => void;\n  /* Called when a tile of the puzzle is solved. Defaults to an empty function. */\n  onTileSolved?: (tile: Tile) => void;\n};\n\nexport function JigsawPuzzle({\n  imageSrc,\n  rows = 3,\n  columns = 4,\n  onSolved = () => {},\n  onTileSolved = () => {},\n}: JigsawPuzzleProps) {\n  let [tiles, setTiles] = useState<Tile[] | undefined>();\n  let [imageSize, setImageSize] = useState<{ width: number; height: number }>();\n  let [rootSize, setRootSize] = useState<{ width: number; height: number }>();\n  let [calculatedHeight, setCalculatedHeight] = useState<number>();\n  let rootElement = useRef<HTMLElement>();\n  let resizeObserver = useRef<ResizeObserver>();\n  let draggingTile = useRef<\n    | {\n        tile: Tile;\n        elem: HTMLElement;\n        mouseOffsetX: number;\n        mouseOffsetY: number;\n      }\n    | undefined\n  >();\n\n  let draggingClasses = [\"shadow-2xl\", \"z-[5]\"];\n\n  let onImageLoaded = useCallback(\n    (image: HTMLImageElement) => {\n      setImageSize({ width: image.width, height: image.height });\n      if (rootSize) {\n        setCalculatedHeight((rootSize!.width / image.width) * image.height);\n      }\n      setTiles(\n        Array.from(Array(rows * columns).keys()).map((position) => ({\n          correctPosition: position,\n          tileHeight: image.height / rows,\n          tileWidth: image.width / columns,\n          tileOffsetX: (position % columns) * (image.width / columns),\n          tileOffsetY: Math.floor(position / columns) * (image.height / rows),\n          currentPosXPerc: Math.random() * (1 - 1 / rows),\n          currentPosYPerc: Math.random() * (1 - 1 / columns),\n          solved: false,\n        }))\n      );\n    },\n    [rows, columns]\n  );\n\n  let onRootElementResized = useCallback(\n    (args: ResizeObserverEntry[]) => {\n      let contentRect = args.find((it) => it.contentRect)?.contentRect;\n      if (contentRect) {\n        setRootSize({\n          width: contentRect.width,\n          height: contentRect.height,\n        });\n        if (imageSize) {\n          setCalculatedHeight(\n            (contentRect.width / imageSize!.width) * imageSize!.height\n          );\n        }\n      }\n    },\n    [setRootSize, imageSize]\n  );\n\n  let onRootElementRendered = useCallback(\n    (element: HTMLElement | null) => {\n      if (element) {\n        rootElement.current = element;\n        let observer = new ResizeObserver(onRootElementResized);\n        observer.observe(element);\n        resizeObserver.current = observer;\n        setRootSize({\n          width: element.offsetWidth,\n          height: element.offsetHeight,\n        });\n        if (imageSize) {\n          setCalculatedHeight(\n            (element.offsetWidth / imageSize.width) * imageSize.height\n          );\n        }\n      }\n    },\n    [setRootSize, imageSize, rootElement, resizeObserver]\n  );\n\n  useEffect(() => {\n    let image = new Image();\n    image.onload = () => onImageLoaded(image);\n    image.src = imageSrc;\n  }, [imageSrc, rows, columns]);\n\n  let onTileMouseDown = useCallback(\n    (\n      tile: Tile,\n      event: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>\n    ) => {\n      if (!tile.solved) {\n        if (event.type === \"touchstart\") {\n          document.documentElement.style.setProperty(\"overflow\", \"hidden\");\n        }\n\n        let eventPos = {\n          x:\n            (event as React.MouseEvent).pageX ??\n            (event as React.TouchEvent).touches[0].pageX,\n          y:\n            (event as React.MouseEvent).pageY ??\n            (event as React.TouchEvent).touches[0].pageY,\n        };\n        draggingTile.current = {\n          tile,\n          elem: event.target as HTMLDivElement,\n          mouseOffsetX:\n            eventPos.x -\n            (event.target as HTMLDivElement).getBoundingClientRect().x,\n          mouseOffsetY:\n            eventPos.y -\n            (event.target as HTMLDivElement).getBoundingClientRect().y,\n        };\n        (event.target as HTMLDivElement).classList.add(...draggingClasses);\n      }\n    },\n    [draggingTile]\n  );\n\n  let onRootMouseMove = useCallback(\n    (\n      event: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>\n    ) => {\n      if (draggingTile.current) {\n        event.stopPropagation();\n        event.preventDefault();\n        let eventPos = {\n          x:\n            (event as React.MouseEvent).pageX ??\n            (event as React.TouchEvent).touches[0].pageX,\n          y:\n            (event as React.MouseEvent).pageY ??\n            (event as React.TouchEvent).touches[0].pageY,\n        };\n        let draggedToRelativeToRoot = {\n          x: clamp(\n            eventPos.x -\n              rootElement.current!.getBoundingClientRect().left -\n              draggingTile.current.mouseOffsetX,\n            0,\n            rootSize!.width - draggingTile.current.elem.offsetWidth\n          ),\n          y: clamp(\n            eventPos.y -\n              rootElement.current!.getBoundingClientRect().top -\n              draggingTile.current.mouseOffsetY,\n            0,\n            rootSize!.height - draggingTile.current.elem.offsetHeight\n          ),\n        };\n        draggingTile.current.elem.style.setProperty(\n          \"left\",\n          `${draggedToRelativeToRoot.x}px`\n        );\n        draggingTile.current.elem.style.setProperty(\n          \"top\",\n          `${draggedToRelativeToRoot.y}px`\n        );\n      }\n    },\n    [draggingTile, rootSize]\n  );\n  let onRootMouseUp = useCallback(\n    (event: React.TouchEvent | React.MouseEvent) => {\n      if (draggingTile.current) {\n        if (event.type === \"touchend\") {\n          document.documentElement.style.removeProperty(\"overflow\");\n        }\n        draggingTile.current?.elem.classList.remove(...draggingClasses);\n        let draggedToPercentage = {\n          x: clamp(\n            draggingTile.current!.elem.offsetLeft / rootSize!.width,\n            0,\n            1\n          ),\n          y: clamp(\n            draggingTile.current!.elem.offsetTop / rootSize!.height,\n            0,\n            1\n          ),\n        };\n        let draggedTile = draggingTile.current.tile;\n        let targetPositionPercentage = {\n          x: (draggedTile.correctPosition % columns) / columns,\n          y: Math.floor(draggedTile.correctPosition / columns) / rows,\n        };\n        let isSolved =\n          Math.abs(targetPositionPercentage.x - draggedToPercentage.x) <=\n            solveTolerancePercentage &&\n          Math.abs(targetPositionPercentage.y - draggedToPercentage.y) <=\n            solveTolerancePercentage;\n\n        if (isSolved) {\n          onTileSolved(draggedTile);\n        }\n\n        setTiles((prevState) => [\n          ...prevState!.filter(\n            (it) => it.correctPosition !== draggedTile.correctPosition\n          ),\n          {\n            ...draggedTile,\n            currentPosXPerc: !isSolved\n              ? draggedToPercentage.x\n              : targetPositionPercentage.x,\n            currentPosYPerc: !isSolved\n              ? draggedToPercentage.y\n              : targetPositionPercentage.y,\n            solved: isSolved,\n          },\n        ]);\n\n        draggingTile.current = undefined;\n      }\n    },\n    [draggingTile, setTiles, rootSize, onSolved]\n  );\n\n  useEffect(() => {\n    if (!tiles) {\n      return;\n    }\n\n    if (tiles.every((tile) => tile.solved)) {\n      onSolved();\n    }\n  }, [tiles]);\n\n  return (\n    <div\n      ref={onRootElementRendered}\n      onTouchMove={onRootMouseMove}\n      onMouseMove={onRootMouseMove}\n      onTouchEnd={onRootMouseUp}\n      onMouseUp={onRootMouseUp}\n      onTouchCancel={onRootMouseUp}\n      onMouseLeave={onRootMouseUp}\n      style={{\n        height: !calculatedHeight ? undefined : `${calculatedHeight}px`,\n      }}\n      className=\"relative\"\n      onDragEnter={(event) => {\n        event.stopPropagation();\n        event.preventDefault();\n      }}\n      onDragOver={(event) => {\n        event.stopPropagation();\n        event.preventDefault();\n      }}\n    >\n      {tiles &&\n        rootSize &&\n        imageSize &&\n        tiles.map((tile) => (\n          <div\n            draggable={false}\n            onMouseDown={(event) => onTileMouseDown(tile, event)}\n            onTouchStart={(event) => onTileMouseDown(tile, event)}\n            key={tile.correctPosition}\n            className={clsx(\n              \"absolute z-[1] select-none cursor-pointer\",\n\n              tile.solved && \"ring-0 z-0 cursor-default\"\n            )}\n            style={{\n              height: `${(1 / rows) * 100}%`,\n              width: `${(1 / columns) * 100}%`,\n              backgroundImage: `url(${imageSrc})`,\n              backgroundSize: `${rootSize!.width}px ${rootSize!.height}px`,\n              backgroundPositionX: `${\n                ((tile.correctPosition % columns) / (columns - 1)) * 100\n              }%`,\n              backgroundPositionY: `${\n                (Math.floor(tile.correctPosition / columns) / (rows - 1)) * 100\n              }%`,\n              left: `${tile.currentPosXPerc * rootSize!.width}px`,\n              top: `${tile.currentPosYPerc * rootSize!.height}px`,\n            }}\n          />\n        ))}\n    </div>\n  );\n}\n"],
  "mappings": "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",
  "names": []
}
